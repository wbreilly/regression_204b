# look at rt by position
#####################################################################################
sumstats.pos = dclean %>% group_by(condition, position) %>% summarise(mean = mean(rt), SD = sd(rt))
p.pos =  ggplot(data=sumstats.pos, aes(x=position, y=mean, group=condition, colour = condition)) +
geom_line(stat = "identity") +
ggtitle("SMS1: Condition * Repetion RTs")
p.pos
# type 2 SS is not working presently
Anova(lm(dclean$rt ~ dclean$position * dclean$condition, type = c(2)))
# main effect of postion and significant position*condition interaction
# could do simple effects ir oaurwuse t tests but should do what CR suggested first
#######################################################
# mean pos 4-5 by condition
#exclude all 1 positions
d25 = dclean %>% filter(!position == 1)
################################
# here it goes
# get some summary statistics
d25sumstats = d25 %>% group_by(condition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep.con = d25 %>% group_by(repetition,condition) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d25.counts = count(d25, condition)
# repetition by condition and only pos's 2-5
# get n
counts2 = count(group_by(d25,condition, repetition))
# add n to sumstats
d25sumstats.rep.con[,5] = counts2[,3]
# add SE
d25sumstats.rep.con = mutate(d25sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,
ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con = p.rep.con + coord_cartesian(ylim=c(400,750))
p.rep.con
# break condition into two factors with two levels each
d25 = mutate(d25, order = as.factor(condition < 3))
d25 = mutate(d25, learning = as.factor(condition == 2 | condition == 4))
# but also make condition a factor
d25$condition = as.factor(d25$condition)
#also make position a factor
d25$position = as.factor(d25$position)
#also make repetition a factor
d25$repetition = as.factor(d25$repetition)
# sumstats on main effects
d25sumstats.mains = d25 %>% group_by(order) %>% summarise(mean = mean(rt), SD = sd(rt))
# anova
summary(aov(rt ~ learning * order * repetition  + Error(subject), data = d25))
# repetition significant and order * repetition interaction
# anova
summary(aov(rt ~ learning * order * repetition + Error(subject / (learning * order * repetition)), data = d25))
# repetition significant and order * repetition interaction
#simple effects follow up
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 4),]))
#######################################################################################
# stricter subject criteria. 100% acc in 2nd cycle final repetition.
#exclude all 1 positions
goodsubs2 = c(2,	4,	5,	7,	9,	11,	15,	19,	20,	21,	22,	23,	24)
exrows4 = which(d25$subject %in% goodsubs2)
d25strict = d25[c(exrows4),]
# anova
summary(aov(rt ~ learning  * order + Error(subject), data = d25strict))
#simple effects follow up
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 4),]))
######################################################################################
# make a bar graph of position by conditiong with SE
# get n
counts = count(group_by(dclean,condition, position))
# add n to sumstats
sumstats.pos[,5] = counts[,3]
# add SE
sumstats.pos = mutate(sumstats.pos, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = sumstats.pos$mean + sumstats.pos$SE,
ymin = sumstats.pos$mean - sumstats.pos$SE)
p.pos.con <- ggplot(data = sumstats.pos, aes(x = factor(condition), y = mean,
fill = factor(position)))
p.pos.con = p.pos.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Condition", y = "RT") +
ggtitle("RT by Position and Condition") +
scale_fill_discrete(name = "Position")  +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.pos.con = p.pos.con + coord_cartesian(ylim=c(400,750))
p.pos.con
###################################################################
#  count RTs less than 100ms. Although some of these may be valid,
# mean visual detection RT is 190ms, and they may be guesses
fastRTs = dclean %>% group_by(subject) %>% count(rt < 100)
t.test(d25[d25$condition == 1 & d25$repetition == 4,9], d25[d25$condition == 4 & d25$repetition == 4,9],paired = F)
######################################
# trying out afex
# type 3 SS w/in subs ANOVA
a1 = aov_ez("subject", "rt", d25, within = c("learning","order","repetition"))
#only 5th position
aov_ez("subject", "rt", d25[which(d25$position == 5),], within = c("learning","order","repetition"))
d25sumstats.sub = d25 %>% group_by(condition,repetition,subject) %>% summarise(mean = mean(rt), SD = sd(rt))
# don't think these are doing what they should
#aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 | 5),], within = c("condition","repetition", "position"))
#aov_ez("subject", "rt", d25[which(d25$repetition == 2 | 4 & d25$condition == 2 | 4),], within = c("condition","repetition"))
# so just make new df with only those levels
d3 = d25 %>% filter(!condition == 1 ) %>% filter(!condition == 3 ) %>% filter(!repetition == 2 ) %>% filter(!repetition == 3 )
a2 = aov_ez("subject", "rt", d3, within = c("order","repetition"))
lsmeans(a2, ~order + repetition)
pairs(lsmeans(a2, ~order + repetition))
# plot these within subjects effects
d3sumstats.sub = d3 %>% group_by(condition,repetition,subject) %>% summarise(mean = mean(rt), SD = sd(rt))
d3sumstats.counts = d3 %>% group_by(condition,repetition,subject) %>% count()
d3sumstats.sub[,6] = d3sumstats.counts[,4]
d3sumstats.sub = d3sumstats.sub %>% mutate(SE = SD/n)
# plot within subjects effects
d3sumstats.sub$condition = as.factor(d3sumstats.sub$condition)
d3sumstats.sub$repetition = as.factor(d3sumstats.sub$repetition)
d3sumstats.sub$subject = as.factor(d3sumstats.sub$subject)
# p.sub.wow <- ggplot(data = d3sumstats.sub, aes(x = factor(condition), y = mean,  fill = factor(subject)))
# p.sub.wow`
#
# p.sub.wow = p.sub.wow + geom_bar(stat = "identity",position = position_dodge(0.9)) +
#   geom_errorbar(limits, position = position_dodge(0.9),
#                 width = 0.15) +
#   labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
#   ggtitle("Mean RT by Condition and Repetition") +
#   scale_x_discrete("Conditions", labels =
#                      c("1" = "Intact-Learned", "2" = "Intact-New",
#                        "3" = "Scrambled-Learned", "4" = " Scrambled-New"))
# p.sub.wow = p.sub.wow + coord_cartesian(ylim=c(400,750))
# p.sub.wow
# p.sub.wow = ggplot(d3sumstats.sub, aes(repetition, mean, color = "condition", factor = "condition")) +
#   geom_point() + geom_line(x = "condition")
# p.sub.wow
View(dclean)
subjects = unique(dclean$subject)
library(tidyverse)
library("lavaan")
library(afex)
library(matlabr)
d <- read.csv("~/walter/dml/sms1/learning_study_data_sms1/all_learning_study_sms1.csv", header = FALSE)
colnames(d)<- c("subject","block", "sequence","repetition","item","key_press","response","acc","rt")
v.intact = c('drink','research','enlist','meet','plant','conceive','sit',
'light','swing','sip','write','dribble','perpetrate',
'lather','shuffle','graduate');
v.scrambled = c('drive','market','fight','date','eat','name','read',
'extinguish','run','cry','open','jump','try','moisturize','shuffle','work')
d$intact =  d$sequence  %in% v.intact
d$scrambled = d$sequence %in% v.scrambled
d$intact = as.factor(d$intact)
d$scrambled = as.factor(d$scrambled)
####################################
# add observation column to df
d = mutate(d, obs = 1:5880)
# add position label
d = mutate(d, position = rep(c(1:5),times = 1176))
# get rid of anything
exrows = d[!complete.cases(d$rt),13]
dsansnas = d[-c(exrows),]
# need to clean up data, throw out RTs greater or less than 3 SDs
###################################################
sub.con.mean.rt = dsansnas %>%  group_by(subject,intact) %>%
summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
dsansnas = dsansnas %>%  group_by(subject,intact) %>%
mutate(mean.sub.con = mean(rt, na.rm = TRUE), SD.sub.con = sd(rt, na.rm = TRUE))
dsansnas = dsansnas %>% mutate(sd3 = 3 * SD.sub.con)
# exlude too long
dsansnas = dsansnas %>% mutate(exclude.high = rt > mean.sub.con + sd3)
# exclude too short
dsansnas = dsansnas %>% mutate(exclude.low = rt < mean.sub.con - sd3)
#put in new df
dclean = dsansnas %>% filter(exclude.low == FALSE, exclude.high == FALSE)
# redo sum stats with clean data
sumstats = dclean %>% group_by(intact) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
sumstats.rep = dclean %>% group_by(repetition) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
sumstats.rep.con = dclean %>% group_by(repetition,intact) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
sumstats.rep.con.bl = dclean %>% group_by(repetition,intact,block) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
learnp1 =  ggplot(data=dclean, aes(x=repetition, y=rt, group=intact, colour = intact)) +
geom_point() +
ggtitle("SMS1 Learning: Condition * Repetion RTs")
learnp1
learnp2 =  ggplot(data=sumstats.rep.con, aes(x=repetition, y=mean, group=intact, colour = intact)) +
geom_line(stat = "identity") +
ggtitle("SMS1: Condition * Repetion RTs")
learnp2
# look at RT by position
sumstats.pos = dclean %>% group_by(intact, position) %>% summarise(mean = mean(rt), SD = sd(rt))
learnp.pos =  ggplot(data=sumstats.pos, aes(x=position, y=mean, group=intact, colour = intact)) +
geom_line(stat = "identity") +
ggtitle("SMS1 Learning: Condition * Repetion RTs")
learnp.pos
# look at RT by position condition and repetition
learnsumstats.pos.rep = dclean %>% group_by(intact, position, repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
learnp.pos.rep =  ggplot(data=learnsumstats.pos.rep, aes(x=position, y=mean, group=repetition, factor = intact, colour = intact)) + geom_point()
# geom_line() +
ggtitle("SMS1 Learning: Condition * Repetion * Position RTs")
learnp.pos.rep
########exclude all 1 positions
d25 = dclean %>% filter(!position == 1)
d25 = d25 %>% filter(!block == "study3")
# here it goes
# get some summary statistics
d25sumstats = d25 %>% group_by(intact) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep.con = d25 %>% group_by(repetition,intact) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d25.counts = count(d25, intact)
# repetition by condition and only pos's 2-5
# get n
counts2 = count(group_by(d25,intact, repetition))
# add n to sumstats
d25sumstats.rep.con[,5] = counts2[,3]
# add SE
d25sumstats.rep.con = mutate(d25sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,
ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)
learnp.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(intact), y = mean,
fill = factor(repetition)))
learnp.rep.con = learnp.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Condition", y = "Pos 2-5 Mean RT") +
ggtitle("Learning pos 2-5 Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact", "2" = "Scrambled" ))
learnp.rep.con = learnp.rep.con + coord_cartesian(ylim=c(400,750))
learnp.rep.con
# type 3 SS w/in subs ANOVA
learna1 = aov_ez("subject", "rt", d25, within = c("intact","repetition", "block"))
learna1
# so just make new df with only those levels
learnd3 = d25 %>% filter(!repetition == 1 )
learnd3.ez = aov_ez("subject", "rt", learnd3, within = c("intact","repetition", "block"))
learnd3.ez
####################################################################################################
# break it down by block
d.block1 = d25 %>% filter(block == "study1")
d.block1.sumstats.rep.con = d.block1 %>% group_by(repetition,intact) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d.block1.counts = count(d.block1, intact)
# repetition by condition and only pos's 2-5
# get n
d.block1.counts2 = count(group_by(d.block1,intact, repetition))
# add n to sumstats
d.block1.sumstats.rep.con[,5] = d.block1.counts2[,3]
# add SE
d.block1.sumstats.rep.con = mutate(d.block1.sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d.block1.sumstats.rep.con$mean + d.block1.sumstats.rep.con$SE,
ymin = d.block1.sumstats.rep.con$mean - d.block1.sumstats.rep.con$SE)
b1.rep.con <- ggplot(data = d.block1.sumstats.rep.con, aes(x = factor(intact), y = mean,
fill = factor(repetition)))
b1.rep.con = b1.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Condition", y = "Pos 2-5 Mean RT") +
ggtitle("Block 1 Learning pos 2-5 Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels = c("1" = "Intact", "2" = "Scrambled" ))
b1.rep.con = b1.rep.con + coord_cartesian(ylim=c(400,800))
b1.rep.con
###############
# block 2
# break it down by block
d.block2 = d25 %>% filter(block == "study2")
d.block2.sumstats.rep.con = d.block2 %>% group_by(repetition,intact) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d.block2.counts = count(d.block2, intact)
# repetition by condition and only pos's 2-5
# get n
d.block2.counts2 = count(group_by(d.block2, intact, repetition))
# add n to sumstats
d.block2.sumstats.rep.con[,5] = d.block2.counts2[,3]
# add SE
d.block2.sumstats.rep.con = mutate(d.block2.sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d.block2.sumstats.rep.con$mean + d.block2.sumstats.rep.con$SE,
ymin = d.block2.sumstats.rep.con$mean - d.block2.sumstats.rep.con$SE)
b2.rep.con <- ggplot(data = d.block2.sumstats.rep.con, aes(x = factor(intact), y = mean,
fill = factor(repetition)))
b2.rep.con = b2.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Condition", y = "Pos 2-5 Mean RT") +
ggtitle("Block 2 Learning Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels = c("1" = "Intact", "2" = "Scrambled" ))
b2.rep.con = b2.rep.con + coord_cartesian(ylim=c(400,800))
b2.rep.con
library(tidyverse)
d = read.csv("~/walter/regression_204b/nonlinear.csv")
View(d)
p1 = plot(x1,y,d)
p1 = plot(x1,y1,d)
p1 = plot(x1,y1,data = d)
??plot
p1 = plot(d$x1,d$y1)
p2 = plot(d$x1,d$y2)
p3 = plot(d$x1,d$y3)
p1
p1 = plot(d$x1,d$y1)
plot(d$x1,d$y1)
m1 = lm(y1 ~ x1^2)
m1 = lm(y1 ~ x1^2, data = d)
m1
summary(m1)
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
plot(d$x1,d$y1)
plot(d$x1,d$y2)
plot(d$x1,d$y3)
plot(d$x1,d$y1)
m1 = lm(y1 ~ -log(x1), data = d)
summary(m1)
summary(m1)
abline(lm(formula = y1 ~ -log(x1), col = "red")
)
abline(lm(formula = d$y1 ~ -log(d$x1), col = "red")
)
abline(lm(formula = d$y1 ~ -log(d$x1)), col = "red")
plot(d$x1,d$y1)
abline(lm(formula = d$y1 ~ -log(d$x1)), col = "red")
abline(lm(formula = y1 ~ -log(x1), data = d), col = "red")
abline(lm(formula = y1 ~ -log(x1), data = d), col = "red")
abline(lm(formula = y1 ~ -log(x1), data = d)), col = "red")
abline(lm(formula = y1 ~ -log(x1), data = d), col = "red"))
abline(lm(formula = y1 ~ log(x1), data = d), col = "red")
abline(lm(formula = y1 ~ (x1), data = d), col = "red")
abline(lm(formula = y1 ~ x1^3, data = d), col = "red")
abline(lm(formula = y1 ~ -x1^3, data = d), col = "red")
abline(lm(formula = y1 ~ log(x1), data = d), col = "red")
abline(lm(formula = y1 ~ -log(x1), data = d), col = "red")
abline(lm(formula = y1 ~ nl(x1), data = d), col = "red")
abline(lm(formula = y1 ~ -exp(x1), data = d), col = "red")
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
plot(d$x1,d$y1)
abline(lm(formula = y1 ~ -exp(x1), data = d), col = "red")
c = coef(m1)
curve(c[1] + exp(c[2]*x), add = TRUE, lty = 1, col = "red")
plot(d$x1,d$y1)
m1 = lm(y1 ~ -log(x1), data = d)
summary(m1)
c = coef(m1)
curve(c[1] + exp(c[2]*x), add = TRUE, lty = 1, col = "red")
curve(c[1] + exp(c[2]*x1), add = TRUE, lty = 1, col = "red")
curve(c[1] + exp(c[2]*x), add = TRUE, lty = 1, col = "red")
curve(c[1] + -log(c[2]*x1), add = TRUE, lty = 1, col = "red")
curve(c[1] + -log(c[2]*d$x1), add = TRUE, lty = 1, col = "red")
curve(c[1] + -log(c[2]*x add = TRUE, lty = 1, col = "red")
curve(c[1] + -log(c[2]*x), add = TRUE, lty = 1, col = "red")
plot(d$x1,d$y1)
curve(c[1] + -log(c[2]*x), add = TRUE, lty = 1, col = "red")
m1 = lm(y1 ~ -log(x1), data = d)
summary(m1)
c = coef(m1)
curve(c[1] + -log(c[2]*x), add = TRUE, lty = 1, col = "red")
m1 = lm(y1 ~ -(x1)^3, data = d)
summary(m1)
c = coef(m1)
curve(c[1] + -log(c[2]*x), add = TRUE, lty = 1, col = "red")
setwd("~/walter/regression_204b")
d <- read.csv("interaction01.csv")
summary(d)
d$xf <- d$x*d$female
d$zy <- scale(d$y)[,1]
d$zx <- scale(d$x)[,1]
d$zfemale <- scale(d$female)[,1]
View(d)
d$zxf <- d$zx*d$zfemale
cor(d[,c('x','female','xf')])
cor(d[,c('zx','zfemale','zxf')])
m1 <- lm(y ~ x*female, data = d)
m2 <- lm(zy ~ zx*zfemale, data = d)
summary(m1)
summary(m2)
df <- d[which(d$female == 1),]
dm <- d[which(d$female == 0),]
m1f <- lm(y ~ x, data = df)
m1m <- lm(y ~ x, data = dm)
summary(m1f)
summary(m1m)
par(mfrow = c(1,3))
plot(d$x, d$y)
abline(lm(d$y ~ d$x), col = "red")
plot(dm$x, dm$y)
abline(lm(y ~ x, data = dm), col = "red")
plot(df$x, df$y)
abline(lm(y ~ x, data = df), col = "red")
#or
par(mfrow = c(1,1))
plot(d$x, d$y)
points(df$x, df$y, col = 'red')
points(dm$x, dm$y, col = 'Green')
abline(lm(y~x, data = df), col = 'red')
abline(lm(y~x, data = dm), col = 'green')
d <- read.csv("lab06dat1.csv")
d <- read.csv("lab06dat1.csv")
d <- read.csv("lab06dat.csv")
head(d)
summary(d)
table(d$serviceanimal)
m1 <- lm(perceivedfree ~ serviceanimal, data = d)
m2 <- lm(independence ~ serviceanimal, data = d)
m3 <- lm(happy ~ serviceanimal, data = d)
anova(m1)
anova(m2)
anova(m3)
summary(m1)
by(d$perceivedfree, d$serviceanimal, mean)-
by(d$perceivedfree, d$serviceanimal, mean)[[1]]
summary(m2)
by(d$independence, d$serviceanimal, mean)-
by(d$independence, d$serviceanimal, mean)[[1]]
summary(m3)
by(d$happy, d$serviceanimal, mean)-
by(d$happy, d$serviceanimal, mean)[[1]]
summary(m3)
t.test(d[d$dog == 1,"happy"],d[d$cat == 1,"happy"],var.equal = TRUE)
t.test(d[d$other == 1,"happy"],d[d$cat == 1,"happy"],var.equal = TRUE)
m4 <- lm(happy ~ perceivedfree + independence +
perceivedfree*independence, data = d)
summary(m4)
#How will you think about the data? Is perceived freedom moderating
#We'll go with perceived freedom as the moderator.
pf <- seq(min(d$perceivedfree),max(d$perceivedfree),.1)
bi <- coef(m4)[3] + pf*coef(m4)[4]
bi
plot(pf,bi,main = "Moderation of Independence by Perceived Freedom",
ylab = "Association of Independence and Happiness",
xlab = "Perceived Freedom Score")
points(
mean(d$perceivedfree),
(coef(m4)[3]+coef(m4)[4]*mean(d$perceivedfree)),
cex = 3, pch = 16, col = "red")
#or
n2sd <- -1*sd(d$perceivedfree)+mean(d$perceivedfree)
p2sd <- 1*sd(d$perceivedfree)+mean(d$perceivedfree)
csd <- mean(d$perceivedfree)
n2sd;csd;p2sd
coef(m4)
d$hn2 <- coef(m4)[1] + coef(m4)[2]*n2sd +
coef(m4)[3]*d$independence + coef(m4)[4]*n2sd*d$independence
d$hcsd <- coef(m4)[1] + coef(m4)[2]*csd +
coef(m4)[3]*d$independence + coef(m4)[4]*csd*d$independence
d$hp2 <- coef(m4)[1] + coef(m4)[2]*p2sd +
coef(m4)[3]*d$independence + coef(m4)[4]*p2sd*d$independence
d <- d[order(d$independence),]
plot(d$independence,d$happy,
type = "n",
main = "Moderated Associations of Independence and Happiness",
ylab = "Association of Independence and Happiness",
xlab = "Independence Scores")
lines(d$independence,d$hn2, lwd = 3, col = "blue")
lines(d$independence,d$hcsd, lwd = 3, col = "red")
lines(d$independence,d$hp2, lwd = 3, col = "green")
lines(c(0,0),c(0,10))
legend(-2,38,lty = c(1,1,1),col = c("blue","red","green"),
legend = c("-1SD","0SD","1SD"))
d <- read.csv("interaction01.csv")
summary(d)
View(d)
d$xf <- d$x*d$female
d$zy <- scale(d$y)[,1]
d$zx <- scale(d$x)[,1]
d$zfemale <- scale(d$female)[,1]
d$zxf <- d$zx*d$zfemale
cor(d[,c('x','female','xf')])
cor(d[,c('zx','zfemale','zxf')])
m1 <- lm(y ~ x*female, data = d)
m2 <- lm(zy ~ zx*zfemale, data = d)
summary(m1)
summary(m2)
d <- read.csv("interaction01.csv")
summary(d)
#generate an interaction term for female*x
d$xf <- d$x*d$female
#z-norm all predictors
d$zy <- scale(d$y)[,1]
d$zx <- scale(d$x)[,1]
d$zfemale <- scale(d$female)[,1]
#generate 3-way interaction term
d$zxf <- d$zx*d$zfemale
#Correlations between predictors and their interaction term
#Are the correlations going to change after the z-transformation?
cor(d[,c('x','female','xf')])
cor(d[,c('zx','zfemale','zxf')])
#linear transformations do not change the relationships b/w the variables
m1 <- lm(y ~ x*female, data = d)
m2 <- lm(zy ~ zx*zfemale, data = d)
summary(m1)
summary(m2)
m1
summary(m1)
d = read.csv("cinteraction.csv")
d = read.csv("cinteraction.csv")
plot(d$fluidint,d$relevantknow)
library(afex)
