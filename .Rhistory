coef(m4)[3]*d$independence + coef(m4)[4]*p2sd*d$independence
d <- d[order(d$independence),]
plot(d$independence,d$happy,
type = "n",
main = "Moderated Associations of Independence and Happiness",
ylab = "Association of Independence and Happiness",
xlab = "Independence Scores")
lines(d$independence,d$hn2, lwd = 3, col = "blue")
lines(d$independence,d$hcsd, lwd = 3, col = "red")
lines(d$independence,d$hp2, lwd = 3, col = "green")
lines(c(0,0),c(0,10))
legend(-2,38,lty = c(1,1,1),col = c("blue","red","green"),
legend = c("-1SD","0SD","1SD"))
summary(m4)
plot(pf,bi,main = "Moderation of Independence by Perceived Freedom",
ylab = "Association of Independence and Happiness",
xlab = "Perceived Freedom Score")
points(
mean(d$perceivedfree),
(coef(m4)[3]+coef(m4)[4]*mean(d$perceivedfree)),
cex = 3, pch = 16, col = "red")
n2sd <- -1*sd(d$perceivedfree)+mean(d$perceivedfree)
p2sd <- 1*sd(d$perceivedfree)+mean(d$perceivedfree)
csd <- mean(d$perceivedfree)
n2sd;csd;p2sd
plot(d$independence,d$happy,
type = "n",
main = "Moderated Associations of Independence and Happiness",
ylab = "Association of Independence and Happiness",
xlab = "Independence Scores")
lines(d$independence,d$hn2, lwd = 3, col = "blue")
lines(d$independence,d$hcsd, lwd = 3, col = "red")
lines(d$independence,d$hp2, lwd = 3, col = "green")
lines(c(0,0),c(0,10))
legend(-2,38,lty = c(1,1,1),col = c("blue","red","green"),
legend = c("-1SD","0SD","1SD"))
??aov_car
m1 = aov_car(d$time ~ d$fluidint*d$relevantknow)
library(afex)
m1 = aov_car(d$time ~ d$fluidint*d$relevantknow)
m1 = aov_car(time ~ fluidint*relevantknow, data =d)
View(d)
# 3.2.17
library(afex)
d = read.csv("cinteraction.csv")
plot(d$fluidint,d$relevantknow)
m1 = aov_car(time ~ fluidint*relevantknow, data =d)
m1 = aov_car(d$time ~ d$fluidint*d$relevantknow, data =d)
summary(m1)
m1 = aov_car(d$time ~ d$fluidint*d$relevantknow + Error(id), data =d)
summary(m1)
m1 = aov_car(d$time ~ d$fluidint*d$relevantknow + Error, data =d)
summary(m1)
View(d)
m1 = aov_car(d$time ~ d$fluidint * d$relevantknow + Error, data =d)
summary(m1)
m1 = lm(d$time ~ d$fluidint * d$relevantknow, data =d)
summary(m1)
x1 <- d$fluidint
x2 <- d$relevantknow
y <- d$time
dat <- data.frame(y=y,x1=x1,x2=x2)
res <- lm(y~x1*x2,data=dat)
z1 <- z2 <- seq(-1,1)
newdf <- expand.grid(x1=z1,x2=z2)
library(ggplot2)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="x2") +
labs(x="x1", y="mean of resp") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
x1 <- d$relevantknow
x2 <- d$fluidint
y <- d$time
dat <- data.frame(y=y,x1=x1,x2=x2)
res <- lm(y~x1*x2,data=dat)
z1 <- z2 <- seq(-1,1)
newdf <- expand.grid(x1=z1,x2=z2)
library(ggplot2)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="x2") +
labs(x="x1", y="mean of resp") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
View(newdf)
View(dat)
View(newdf)
x1 <- scale(d$relevantknow)
x1 <- scale(d$relevantknow)
x2 <- scale(d$fluidint)
y <- scale(d$time)
dat <- data.frame(y=y,x1=x1,x2=x2)
res <- lm(y~x1*x2,data=dat)
z1 <- z2 <- seq(-1,1)
newdf <- expand.grid(x1=z1,x2=z2)
library(ggplot2)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="x2") +
labs(x="Relevant Knowledge", y="Time") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
x2 <- scale(d$relevantknow)
x1 <- scale(d$fluidint)
y <- scale(d$time)
dat <- data.frame(y=y,x1=x1,x2=x2)
res <- lm(y~x1*x2,data=dat)
z1 <- z2 <- seq(-1,1)
newdf <- expand.grid(x1=z1,x2=z2)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="x2") +
labs(x="Relevant Knowledge", y="Time") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
summary(m1)
x1 <- scale(d$relevantknow)
x2 <- scale(d$fluidint)
y <- scale(d$time)
dat <- data.frame(y=y,x1=x1,x2=x2)
res <- lm(y~x1*x2,data=dat)
z1 <- z2 <- seq(-1,1)
newdf <- expand.grid(x1=z1,x2=z2)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="x2") +
labs(x="Relevant Knowledge", y="Time") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
View(newdf)
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="FluidInt") +
labs(x="Relevant Knowledge", y="Time") +
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
p <- ggplot(data=transform(newdf, yp=predict(res, newdf)),
aes(y=yp, x=x1, color=factor(x2))) + stat_smooth(method=lm)
p + scale_colour_discrete(name="FluidInt") +
labs(x="Relevant Knowledge", y="Time") +
ggtitle("Interaction of Relevant Knowledge and Fluid Intelligence")
scale_x_continuous(breaks=seq(-1,1)) + theme_bw()
summary(m1)
set.seed(1234)
b0 = 130
b1 = 2.5
n = 100
x = rnorm(n, 10, 0.785)
error = rnorm(100)
y = b0 + b1*x + error
plot(x, y, xlab = "Books Read", ylab = "GRE Verbal Score", main = "Scatterplot of Books Read vs. GRE Verbal Score")
mod1 = lm(y ~ x) #fit a model to the simulated data
abline(mod1, col = "red") #overlay the regression line
#Population parameters for University 1
b0_u1 = 130 #intercept
b1_u1 = 2.5 #slope
n = 100
x = rnorm(n, 10, 0.785) #number of books read as a normal random 					    variable
error = rnorm(100) #standard normal error term
y_u1 = b0_u1 + b1_u1*x + error #population generating model for 							   University 1
#Population parameters for University 2
b0_u2 = 140 #intercept, higher intercept than University 1...
b1_u2 = 1 #slope, ...but smaller slope than University 1
y_u2 = b0_u2 + b1_u2*x + error #population generating model for 							   University 2
#Population parameters for University 3
b0_u3 = 120 #intercept
b1_u3 = 3 #slope
y_u3 = b0_u3 + b1_u3*x + error
#population generating model for University 3
#Create a combined data frame for all 3 universities
data = data.frame(x, y_u1, y_u2, y_u3)
mod1 = lm(y_u1 ~ x, data = data) #University 1
mod2 = lm(y_u2 ~ x, data = data) #University 2
mod3 = lm(y_u3 ~ x, data = data) #University 3
#Now we can plot each university on the same plot
plot(x, y_u1, xlab = "Books Read", ylab = "GRE Verbal Score", main = "GRE Regressed on Books Read", col = "red", ylim = c(140, 160))
par(new = TRUE)
plot(x, y_u2, xlab = "Books Read", ylab = "GRE Verbal Score", main = "GRE Regressed on Books Read", col = "blue", ylim = c(140, 160))
par(new = TRUE)
plot(x, y_u3, xlab = "Books Read", ylab = "GRE Verbal Score", main = "GRE Regressed on Books Read", col = "dark green", ylim = c(140, 160))
legend(10.5, 145, c("University 1", "University 2", "University 3"), col = c("red", "blue", "dark green"), pch = c(16, 16))
library(tidyverse)
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
# just leave this here
abline(lm(formula = y1 ~ x1, data = d), col = "red")
#1a plot it
plot(d$x1,d$y1)
plot(d$x1,d$y2)
plot(d$x1,d$y3)
plot(d$x1,d$y1)
plot(d$x1,d$y2)
plot(d$x1,d$y3)
plot(d$x1,d$y1)
plot(d$x1,d$y1)
d
plot(d$x1,d$y3)
# Created: 2.23.17
library(tidyverse)
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
# just leave this here
abline(lm(formula = y1 ~ x1, data = d), col = "red")
plot(d$x1,d$y1)
plot(d$x1,d$y2)
plot(d$x1,d$y3)
b
#standard lm
m1 = lm(y1 ~ x1, data = d)
summary(m1)
abline(lm(formula = y1 ~ x1, data = d), col = "red")
# use quardaratic
nlm1 = lm(y1 ~ x1 + I(x1^2), data = d)
summary(nlm1)
c = coef(nlm1)
curve(c[1] + c[2]*x + c[3]*(x^2), add = TRUE, lty = 1, col = "red")
# try log
nlm2 = nls(y1 ~ a - log(x1), start = list(a = 4), data = d) #think of a as your "intercept" and b as your "slope"
summary(nlm2)
c = coef(nlm2)
curve(c[1] - log(x), add = TRUE, lty = 1, col = "red")
AIC(m1);AIC(nlm1);AIC(nlm2)
BIC(m1);BIC(nlm1);BIC(nlm2)
###########
# predict y2 with x1
#standard lm
m2 = lm(y2 ~ x1, data = d)
summary(m2)
abline(lm(formula = y2 ~ x1, data = d), col = "red")
#sine model
nlm3 = nls(y2 ~ a + sin(x1), start = list(a = 5), data = d)
summary(nlm3)
c = coef(nlm3)
curve(c[1] + sin(x), add = TRUE, lty = 1, col = "red")
# use cubic
nlm4 = lm(y1 ~ x1 + I(x1^3), data = d)
summary(nlm4)
c = coef(nlm4)
curve(c[1] + c[2]*x + c[3]*(x^3), add = TRUE, lty = 1, col = "red")
AIC(m2); AIC(nlm3); AIC(nlm4)
BIC(m2); BIC(nlm3); BIC(nlm4)
###########
# predict y3 with x1
#standard lm
m3 = lm(y3 ~ x1, data = d)
summary(m3)
abline(lm(formula = y3 ~ x1, data = d), col = "red")
# use quadratic
nlm5 = lm(y3 ~ x1 + I(x1^2), data = d)
summary(nlm5)
c = coef(nlm5)
curve(c[1] + c[2]*x + c[3]*(x^2), add = TRUE, lty = 1, col = "red")
# use cubic
nlm6 = lm(y3 ~ x1 + I(x1^3), data = d)
summary(nlm6)
c = coef(nlm6)
curve(c[1] + c[2]*x + c[3]*(x^3), add = TRUE, lty = 1, col = "red")
# try log
nlm7 = nls(y3 ~ a + logb(x, b= 1.25 ), start = list(a = 0), data = d) #think of a as your "intercept" and b as your "slope"
summary(nlm7)
c = coef(nlm7)
curve(c[1] + logb(x, b = 1.25), add = TRUE, lty = 1, col = "red")
AIC(m3); AIC(nlm5); AIC(nlm6); AIC(nlm7)
BIC(m3); BIC(nlm5); BIC(nlm6); BIC(nlm7)
AIC(m1);AIC(nlm1);AIC(nlm2)
BIC(m1);BIC(nlm1);BIC(nlm2)
plot(d$x1,d$y1)
m1 = lm(y1 ~ x1, data = d)
summary(m1)
abline(lm(formula = y1 ~ x1, data = d), col = "red")
nlm1 = lm(y1 ~ x1 + I(x1^2), data = d)
summary(nlm1)
c = coef(nlm1)
curve(c[1] + c[2]*x + c[3]*(x^2), add = TRUE, lty = 1, col = "red")
# try log
nlm2 = nls(y1 ~ a - log(x1), start = list(a = 4), data = d) #think of a as your "intercept" and b as your "slope"
summary(nlm2)
c = coef(nlm2)
curve(c[1] - log(x), add = TRUE, lty = 1, col = "red")
AIC(m1);AIC(nlm1);AIC(nlm2)
BIC(m1);BIC(nlm1);BIC(nlm2)
plot(d$x1,d$y2)
m2 = lm(y2 ~ x1, data = d)
summary(m2)
abline(lm(formula = y2 ~ x1, data = d), col = "red")
#sine model
nlm3 = nls(y2 ~ a + sin(x1), start = list(a = 5), data = d)
summary(nlm3)
c = coef(nlm3)
curve(c[1] + sin(x), add = TRUE, lty = 1, col = "red")
# use cubic
nlm4 = lm(y1 ~ x1 + I(x1^3), data = d)
summary(nlm4)
c = coef(nlm4)
curve(c[1] + c[2]*x + c[3]*(x^3), add = TRUE, lty = 1, col = "red")
AIC(m2); AIC(nlm3); AIC(nlm4)
BIC(m2); BIC(nlm3); BIC(nlm4)
plot(d$x1,d$y3)
m3 = lm(y3 ~ x1, data = d)
summary(m3)
abline(lm(formula = y3 ~ x1, data = d), col = "red")
# use quadratic
nlm5 = lm(y3 ~ x1 + I(x1^2), data = d)
summary(nlm5)
c = coef(nlm5)
curve(c[1] + c[2]*x + c[3]*(x^2), add = TRUE, lty = 1, col = "red")
# use cubic
nlm6 = lm(y3 ~ x1 + I(x1^3), data = d)
summary(nlm6)
c = coef(nlm6)
curve(c[1] + c[2]*x + c[3]*(x^3), add = TRUE, lty = 1, col = "red")
# try log
nlm7 = nls(y3 ~ a + logb(x, b= 1.25 ), start = list(a = 0), data = d) #think of a as your "intercept" and b as your "slope"
summary(nlm7)
c = coef(nlm7)
curve(c[1] + logb(x, b = 1.25), add = TRUE, lty = 1, col = "red")
AIC(m3); AIC(nlm5); AIC(nlm6); AIC(nlm7)
BIC(m3); BIC(nlm5); BIC(nlm6); BIC(nlm7)
d = read.csv("~/walter/regression_204b/nonlinearhw.csv")
plot(d$x1,d$y3)
m3 = lm(y3 ~ x1, data = d)
summary(m3)
abline(lm(formula = y3 ~ x1, data = d), col = "red")
# use quadratic
nlm5 = lm(y3 ~ x1 + I(x1^2), data = d)
summary(nlm5)
c = coef(nlm5)
curve(c[1] + c[2]*x + c[3]*(x^2), add = TRUE, lty = 1, col = "red")
# use cubic
nlm6 = lm(y3 ~ x1 + I(x1^3), data = d)
summary(nlm6)
c = coef(nlm6)
curve(c[1] + c[2]*x + c[3]*(x^3), add = TRUE, lty = 1, col = "red")
# try log
nlm7 = nls(y3 ~ a + logb(x, b= 1.25 ), start = list(a = 0), data = d) #think of a as your "intercept" and b as your "slope"
nlm7 = nls(y3 ~ a + logb(x1, b= 1.25 ), start = list(a = 0), data = d) #think of a as your "intercept" and b as your "slope"
summary(nlm7)
c = coef(nlm7)
curve(c[1] + logb(x, b = 1.25), add = TRUE, lty = 1, col = "red")
AIC(m3); AIC(nlm5); AIC(nlm6); AIC(nlm7)
BIC(m3); BIC(nlm5); BIC(nlm6); BIC(nlm7)
m1 = lm(y1 ~ x1, data = d)
summary(m1)
d = read.csv("~/drive/ASBI.davis/WBR.ANALOGY,MMCB, RAVENS, REMOTE, VOCAB, AMBIG -5.27.csv")
View(d)
plot(d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.,d$MMCB..Mean.Quiz1Master.ACC.)
plot(d$MMCB..Mean.Quiz1Master.ACC.,d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.)
plot(d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.,d$MMCB..Mean.Quiz1Master.ACC.,)
plot(d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.,d$MMCB..Mean.Quiz1Master.ACC.)
m1 = lm(d$MMCB..Mean.Quiz1Master.ACC. ~ d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.)
summary(m1)
abline(lm(formula = d$MMCB..Mean.Quiz1Master.ACC. ~ d$AR.score.rt..Amb.corr.rt...Fill.corr.rt.), col = "red")
d = read.delim("aids.txt")
View(d)
d = read.csv("aids.txt")
View(d)
d = read.delim2("aids.txt")
View(d)
d = read.delim("aids.txt", header = FALSE, sep = "\t")
View(d)
aids <- read.table("~/walter/regression_204b/aids.txt", quote="\"", comment.char="")
View(aids)
d <- read.table("aids.txt", quote="\"", comment.char="")
d <- read.table("aids.txt", quote="\", comment.char="")
"
rm(aids)
colnames(d) = c("ID","Treatment","Age","Gender(Male=1)","Week","logCD4")
tail(d)
?? randu
randasamp = sample.int(1313, size = 50, replace = FALSE)
randsamp
randasamp
library(tidyverse)
dspag = d %>% filter(ID %in% randasamp)
View(dspag)
unique(dspag$ID)
randasamp
rand.samp = sample.int(1313, size = 50, replace = FALSE)
dspag = d %>% filter(ID %in% rand.samp)
p <- ggplot(data = dspag, aes(x = Time, y = logCD4, group = ID))
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID))
p + geom_line
p + geom_point()
p + geom_line()
p + geom_point()+ geom_line() + ggtitle("AIDS")
p + geom_point() + geom_line() + ggtitle("AIDS")
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, factor = Treatment))
p  + geom_line() + ggtitle("AIDS") + factor()
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, factor = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = Treatment, fill = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID,  fill = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = factor(Week), y = logCD4, group = ID, colour = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor("Treatment")))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS")
d$Treatment = as.factor(d$Treatment)
d$Treatment = as.factor(d$Treatment)
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = Treatment))
p  + geom_line() + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS") + guide_legend(title = Treatment)
p  + geom_line() + ggtitle("AIDS") + guide_legend(title = "Treatment")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS") + guide_legend(title = "Treatment")
p  + geom_line() + ggtitle("AIDS") + guide_legend(title = waiver("Treatment"))
p  + geom_line() + ggtitle("AIDS") + guide_legend(title = "Treatment")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment),guide_legend(title = "Treatment")))
p  + geom_line() + ggtitle("AIDS")
p  + geom_line() + ggtitle("AIDS") +  scale_fill_continuous(guide_legend(title = "Treatment"))
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS") +  scale_fill_continuous(guide_legend(title = "Treatment"))
p  + geom_line(guide_legend(title = "Treatment")) + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line(guide_legend(title = "Treatment")) + ggtitle("AIDS")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment),guide_legend(title = "Treatment")))
p  + geom_line() + ggtitle("AIDS")
library(nlme)
m1 = lme(logCD4 ~ Treatment + Gender + Week, random = ~ 1 | ID, method = "REML", data = d) #random intercept only
colnames(d) = c("ID","Treatment","Age","Gender","Week","logCD4")
m1 = lme(logCD4 ~ Treatment + Gender + Week, random = ~ 1 | ID, method = "REML", data = d) #random intercept only
summary(m1)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1 | ID, method = "REML", data = d) #random intercept only
summary(m1)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random =  ID, method = "REML", data = d) #random intercept only
summary(m1)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random =  | ID, method = "REML", data = d) #random intercept only
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~  | ID, method = "REML", data = d) #random intercept only
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
d$Treatment = as.factor(d$Treatment)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
??method
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment),guide_legend(title = "Treatment")))
p  + geom_line() + ggtitle("AIDS") + labs(colour = "Treatment")
library(tidyverse)
d = read.table("aids.txt", quote="\"", comment.char="")
colnames(d) = c("ID","Treatment","Age","Gender","Week","logCD4")
rand.samp = sample.int(1313, size = 50, replace = FALSE)
# create new df with rand IDS
dspag = d %>% filter(ID %in% rand.samp)
#spag plot
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment),guide_legend(title = "Treatment")))
p  + geom_line() + ggtitle("AIDS") + labs(colour = "Treatment")
p <- ggplot(data = dspag, aes(x = Week, y = logCD4, group = ID, colour = factor(Treatment)))
p  + geom_line() + ggtitle("AIDS") + labs(colour = "Treatment")
library(nlme)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
m1 = lme(logCD4 ~ Treatment + Gender , random = ~ 1  | ID | Week, method = "REML", data = d) #random intercept only
summary(m1)
m1 = lme(logCD4 ~ Treatment + Gender , random = ~ 1  | Week, method = "REML", data = d) #random intercept only
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
m2 = lme(logCD4 ~ Treatment + Gender , random = ~ 1  | Week, method = "REML", data = d) #random intercept only
summary(m1)
summary(m2)
m2 = lme(logCD4 ~ Treatment + Gender , random = ~ 1 + Week | ID, method = "REML", data = d) #random intercept only
summary(m2)
d$Treatment = as.factor(d$Treatment)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
# mixed effects mod with random intercept for ID
d$Treatment = as.factor(d$Treatment)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
#3
# miced effects model with random int and random slope for week
m2 = lme(logCD4 ~ Treatment + Gender , random = ~ 1 + Week | ID, method = "REML", data = d) #random intercept only
summary(m2
)
m1 = lme(logCD4 ~ Week + Treatment + Gender , random = ~ 1  | ID, method = "REML", data = d) #random intercept only
summary(m1)
m2 = lme(logCD4 ~ Treatment + Gender , random = ~ 1 + Week | ID, method = "REML", data = d) #random intercept only
summary(m2)
AIC(m1); AIC(m2); BIC(m1);BIC(m2); aov(m1,m2)
AIC(m1); AIC(m2); BIC(m1);BIC(m2); LRT(m1,m2)
AIC(m1); AIC(m2); BIC(m1);BIC(m2); anova(m1,m2)
anova(m1,m2)
d = read.csv("Dawtry Sutton and Sibley 2015 Study 1a.csv")
d = read.csv("Dawtry Sutton and Sibley 2015 Study 1a.csv")
names(d)[1] <- "id" #since we don't want the special character
View(d)
dlong = reshape(d, idvar = "d", varying = c(list(names(d)[2:12]), list(names(d)[15:25])),
v.names = c("pdScore", "scScore"), timevar = c("PD", "SC"),
times = c(15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165), #times has to have the same values for both variables
direction = "long"
)
View(dlong)
#reorder by subject number
dlong = dlong[order(dlong$id),]
require(ggplot2)
p <- ggplot(data = dlong, aes(x = PD, y = pdScore, group = id))
p + geom_line()
library(tidyverse)
??melt
