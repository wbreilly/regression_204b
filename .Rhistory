p.rep.25 =  ggplot(data=d25sumstats.rep.con, aes(x=repetition, y=mean, group=condition, colour = condition)) +
geom_line(stat = "identity") +
ggtitle("SMS1: Condition * Repetion RTs Pos's 2-5")
p.rep.25
View(d25sumstats.rep.con)
counts2 = count(group_by(d25,condition, repetition))
View(counts2)
tail(dclean)
exrows3 = dclean[!(dclean$position == 1),13]
d25 = dclean[c(exrows3),]
rm(d25)
exrows3 = dclean[!(dclean$position == 1),13]
d25 = dclean[c(exrows3),]
dclean = mutate(clean, obs = 1:5207)
exrows3 = dclean[!(dclean$position == 1),13]
d25 = dclean[c(exrows3),]
rm(d25)
dclean = mutate(clean, obs = 1:5207)
dclean = mutate(dclean, obs = 1:5207)
exrows3 = dclean[!(dclean$position == 1),13]
d25 = dclean[c(exrows3),]
View(d25)
d25sumstats = d25 %>% group_by(condition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep.con = d25 %>% group_by(repetition,condition) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d25.counts = count(d25, condition)
d25 = mutate(d25, order = condition < 3)
d25 = mutate(d25, learning = condition == 2 | condition == 4)
summary(aov(rt ~ learning * order  + Error(subject), data = d25))
summary(aov(rt ~ learning * order * repetition + Error(subject), data = d25))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 4),]))
summary(aov(rt ~ condition, data = d25))
summary(aov(rt ~ condition * repetition, data = d25))
summary(aov(rt ~ learning * order  + Error(subject), data = d25))
summary(aov(rt ~ learning * order * repetition + Error(subject), data = d25))
d25sumstats = d25 %>% group_by(condition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep.con = d25 %>% group_by(repetition,condition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25.counts = count(d25, condition)
counts2 = count(group_by(d25,condition, repetition))
View(dclean)
View(d25sumstats.rep.con)
p.pos.con
d25sumstats.rep.con[,5] = counts2[,3]
# add n to sumstats
d25sumstats.rep.con[,5] = counts2[,3]
# add SE
d25sumstats.rep.con = mutate(d25sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,
ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.pos.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_fill_discrete(name = "Repetition")  +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con
# create a bar graph
limits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,
ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.pos.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.rep.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con
p.rep.con = p.rep.con + coord_cartesian(ylim=c(400,750))
p.rep.con
p.pos.con
p.rep.con
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor("Repetition")))
p.rep.con = p.rep.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con = p.rep.con + coord_cartesian(ylim=c(400,750))
p.rep.con
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con = p.rep.con + coord_cartesian(ylim=c(400,750))
p.rep.con
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 4),]))
summary(aov(rt ~ condition + Error(subject), d25[which(d25$repetition == 4),]))
learning * order
summary(aov(rt ~ learning * order * repetition + Error(subject), data = d25))
t.test(which(d25$condition == 2, repetition==4),which(d25$condition == 4, repetition==4))
t.test(which(d25$condition == 2, d25$repetition==4),which(d25$condition == 4, d25$repetition==4))
?? t.test
t.test(d25$rt[which(d25$condition == 2, d25$repetition==1),],which(d25$condition == 4, d25$repetition==4))
t.test(which(d25$rt,d25$condition == 2, d25$repetition==1),which(d25$rt,d25$condition == 4, d25$repetition==4))
p.rep.con
p.pos.con
unique(dclean[c("subject", "condition")])
unique(dclean[c("subject")])
p.pos.con
p.rep.con
View(sumstats)
library(tidyverse)
d25sumstats.mains = d25 %>% group_by(order) %>% summarise(mean = mean(rt), SD = sd(rt))
View(d25sumstats.mains)
d25sumstats.mains = d25 %>% group_by(order,learning) %>% summarise(mean = mean(rt), SD = sd(rt))
View(d25sumstats.mains)
d25sumstats.mains = d25 %>% group_by(order) %>% summarise(mean = mean(rt), SD = sd(rt))
View(d25sumstats.mains)
t.test(which(d25$order == TRUE), which(d25$order == FALSE))
t.test(which(d25$order == TRUE,d25$rt), which(d25$order == FALSE,d25$rt))
summary(aov(rt ~ learning * order * repetition + Error(subject), data = d25))
summary(aov(rt ~ learning * order * repetition + Error(subject / (learning * order * repetition) ), data = d25))
dclean %>% group_by(subject) %>% count(rt < 100)
fastRTs = dclean %>% group_by(subject) %>% count(rt < 100)
View(fastRTs)
summary(aov(rt ~ learning * order * repetition + Error(subject / (learning * order * repetition) ), data = d25))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 4),]))
summary(aov(rt ~ learning * order * repetition + Error(subject  ), data = d25))
View(d25)
library(tidyverse)
sub.con.mean.rt = dsansnas %>%  group_by(subject,condition) %>%
summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
View(sub.con.mean.rt)
getwd()
setwd(regression)
ls
setwd("regression_204b")
setwd(regression_204b)
temp <- matrix(c(
1,   .5,   .5,   .5,
.5,    1,   .3,   .3,
.5,   .3,    1,   .2,
.5,   .3,   .2,    1), nrow = 4, ncol = 4, byrow = TRUE)
install.packages('MBESS') #may take a while, be patient
library(MBESS)
temp2 = cor2cov(temp, c(1,2,3,10))
library(MASS)
set.seed(200)
temp3 = as.data.frame(mvrnorm(100, c(0,0,0,0), temp2, empirical = TRUE))
summary(temp3)
cov(temp3)
cov(temp3[,1], temp3[,2])
cor(temp3) #correlation matrix
cor.test(temp3$V2, temp3$V3)
install.packages("afex")
install.packages('ltm')
temp3$male = 0
temp3[which(temp3[,4] > 0),'male'] = 1
library(ltm)
temp3$male = as.factor(temp3$male)
biserial.cor(temp3$V1, temp3$male)
install.packages('psych')
library(psych)
phi(example, digits = 3)
phi(c(19,54,60,52), digits = 3)
example =  matrix(c(19,54,60,52), nrow = 2, ncol = 2, byrow = TRUE)
phi(example, digits = 3)
phi(c(19,54,60,52), digits = 3)
mod1 = lm(V1 ~ V2, data = temp3)
summary(mod1)
load("~/walter/dml/sms1.r.analyses/.RData")
library(tidyverse)
library("lavaan")
library(afex)
d <- read.delim("~/walter/dml/sms1/allgood_sms1.dat", header = FALSE)
colnames(d)<- c("subject","block","sequence.v","repetition","verb","keypress","answer","accuracy","rt","intact.s","scrambled.s","condition")
# condition key 1 = intact-learned; 2 = intact-new; 3 = scrambled-learned; 4 = scrambled-new;
# add observation column to df
d = mutate(d, obs = 1:5760)
# add position label
d = mutate(d, position = rep(c(1:5),times = 1152))
# get rid of anything
exrows = d[!complete.cases(d$rt),13]
dsansnas = d[-c(exrows),]
# condition by repetition
###################################################
# need to clean up data, throw out RTs greater or less than 3 SDs
###################################################
sub.con.mean.rt = dsansnas %>%  group_by(subject,condition) %>%
summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
dsansnas = dsansnas %>%  group_by(subject,condition) %>%
mutate(mean.sub.con = mean(rt, na.rm = TRUE), SD.sub.con = sd(rt, na.rm = TRUE))
dsansnas = dsansnas %>% mutate(sd3 = 3 * SD.sub.con)
# exlude too long
dsansnas = dsansnas %>% mutate(exclude.high = rt > mean.sub.con + sd3)
# exclude too short
dsansnas = dsansnas %>% mutate(exclude.low = rt < mean.sub.con - sd3)
# exclude less than 200ms
# jk dont do that # dsansnas = dsansnas %>% mutate(exclude.hellafast = rt < 200)
######################## start here
dclean = dsansnas %>% filter(exclude.low == FALSE, exclude.high == FALSE) #,exclude.hellafast == FALSE)
######################################
# redoing sum stats with clean up data
# get some summary statistics
sumstats = dclean %>% group_by(condition) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
sumstats.rep = dclean %>% group_by(repetition) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
sumstats.rep.con = dclean %>% group_by(repetition,condition) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))
##########
#1a plot
p1 =  ggplot(data=dclean, aes(x=repetition, y=rt, group=condition, colour = condition)) +
geom_point() +
ggtitle("SMS1: Condition * Repetion RTs")
p1
p2 =  ggplot(data=sumstats.rep.con, aes(x=repetition, y=mean, group=condition, colour = condition)) +
geom_line(stat = "identity") +
ggtitle("SMS1: Condition * Repetion RTs")
p2
# anova
summary(aov(rt ~ condition , data = dclean))
# output is F = 6.492; p = .0109
summary(aov(rt ~ condition + Error(subject), data = dclean))
# F = 6.633; p = .01
# RM ANOVA
summary(aov(rt ~ repetition*condition + Error(subject), data = dclean))
# simple effects split on repetition
summary(aov(rt ~ condition + Error(subject), dclean[which(dclean$repetition == 1),]))
summary(aov(rt ~ condition + Error(subject), dclean[which(dclean$repetition == 2),]))
summary(aov(rt ~ condition + Error(subject), dclean[which(dclean$repetition == 3),]))
summary(aov(rt ~ condition + Error(subject), dclean[which(dclean$repetition == 4),]))
# no significant differences
#####################################################################################
# look at rt by position
#####################################################################################
sumstats.pos = dclean %>% group_by(condition, position) %>% summarise(mean = mean(rt), SD = sd(rt))
p.pos =  ggplot(data=sumstats.pos, aes(x=position, y=mean, group=condition, colour = condition)) +
geom_line(stat = "identity") +
ggtitle("SMS1: Condition * Repetion RTs")
p.pos
# type 2 SS is not working presently
Anova(lm(dclean$rt ~ dclean$position * dclean$condition, type = c(2)))
# main effect of postion and significant position*condition interaction
# could do simple effects ir oaurwuse t tests but should do what CR suggested first
#######################################################
# mean pos 4-5 by condition
#exclude all 1 positions
d25 = dclean %>% filter(!position == 1)
################################
# here it goes
# get some summary statistics
d25sumstats = d25 %>% group_by(condition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))
d25sumstats.rep.con = d25 %>% group_by(repetition,condition) %>% summarise(mean = mean(rt), SD = sd(rt))
# trial counts
d25.counts = count(d25, condition)
# repetition by condition and only pos's 2-5
# get n
counts2 = count(group_by(d25,condition, repetition))
# add n to sumstats
d25sumstats.rep.con[,5] = counts2[,3]
# add SE
d25sumstats.rep.con = mutate(d25sumstats.rep.con, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,
ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)
p.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(condition), y = mean,
fill = factor(repetition)))
p.rep.con = p.rep.con + geom_bar(stat = "identity",position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Conditions", y = "Pos 2-5 Mean RT") +
ggtitle("Mean RT by Condition and Repetition") +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.rep.con = p.rep.con + coord_cartesian(ylim=c(400,750))
p.rep.con
# break condition into two factors with two levels each
d25 = mutate(d25, order = as.factor(condition < 3))
d25 = mutate(d25, learning = as.factor(condition == 2 | condition == 4))
#also make repetition a factor
d25$repetition = as.factor(d25$repetition)
# sumstats on main effects
d25sumstats.mains = d25 %>% group_by(order) %>% summarise(mean = mean(rt), SD = sd(rt))
# anova
summary(aov(rt ~ learning * order * repetition  + Error(subject), data = d25))
# repetition significant and order * repetition interaction
# anova
summary(aov(rt ~ learning * order * repetition + Error(subject / (learning * order * repetition)), data = d25))
# repetition significant and order * repetition interaction
#simple effects follow up
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25[which(d25$repetition == 4),]))
#######################################################################################
# stricter subject criteria. 100% acc in 2nd cycle final repetition.
#exclude all 1 positions
goodsubs2 = c(2,	4,	5,	7,	9,	11,	15,	19,	20,	21,	22,	23,	24)
exrows4 = which(d25$subject %in% goodsubs2)
d25strict = d25[c(exrows4),]
# anova
summary(aov(rt ~ learning  * order + Error(subject), data = d25strict))
#simple effects follow up
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 1),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 2),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 3),]))
summary(aov(rt ~ learning * order + Error(subject), d25strict[which(d25strict$repetition == 4),]))
######################################################################################
# make a bar graph of position by conditiong with SE
# get n
counts = count(group_by(dclean,condition, position))
# add n to sumstats
sumstats.pos[,5] = counts[,3]
# add SE
sumstats.pos = mutate(sumstats.pos, SE = SD/sqrt(n))
# create a bar graph
limits <- aes(ymax = sumstats.pos$mean + sumstats.pos$SE,
ymin = sumstats.pos$mean - sumstats.pos$SE)
p.pos.con <- ggplot(data = sumstats.pos, aes(x = factor(condition), y = mean,
fill = factor(position)))
p.pos.con = p.pos.con + geom_bar(stat = "identity",
position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9),
width = 0.15) +
labs(x = "Condition", y = "RT") +
ggtitle("RT by Position and Condition") +
scale_fill_discrete(name = "Position")  +
scale_x_discrete("Conditions", labels =
c("1" = "Intact-Learned", "2" = "Intact-New",
"3" = "Scrambled-Learned", "4" = " Scrambled-New"))
p.pos.con = p.pos.con + coord_cartesian(ylim=c(400,750))
p.pos.con
###################################################################
#  count RTs less than 100ms. Although some of these may be valid,
# mean visual detection RT is 190ms, and they may be guesses
fastRTs = dclean %>% group_by(subject) %>% count(rt < 100)
t.test(d25[d25$condition == 1 & d25$repetition == 4,9], d25[d25$condition == 4 & d25$repetition == 4,9],paired = F)
######################################
# trying out afex
# type 3 SS w/in subs ANOVA
aov_ez("subject", "rt", d25, within = c("learning","order","repetition"))
#only 5th position
aov_ez("subject", "rt", d25[which(d25$position == 5),], within = c("learning","order","repetition"))
d25sumstats.sub = d25 %>% group_by(condition,repetition,subject) %>% summarise(mean = mean(rt), SD = sd(rt))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 && 4),], within = c("learning","order","repetition"))
no
aov_ez("subject", "rt", d25[which(d25$repetition == 1 || 4, d25$condition == 2 ||4),], within = c("condition","repetition"))
View(d25)
class(d25$repetition)
which(d25$repetition == 1 || 4, d25$condition == 2 || 4),]
which(d25$repetition == 1 || 4, d25$condition == 2 || 4),]
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4, d25$condition == 2 | 4),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4, d25$condition == 2 | 4,d25$position == 4 |5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4, d25$condition == 2 | 4,d25$position == 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 5 | 4),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 5 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 4 | 5 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 3 | 4 | 5 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 ,], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 ),], within = c("condition","repetition"))
class(d25$condition)
d25$condition = as.factor(d25$condition)
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 ),], within = c("condition","repetition"))
class(d25$condition)
class(d25$repetition)
class(d25$position)
d25$position = as.factor(d25$position)
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 4 | 5 ),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 2),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 3),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 4),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 4 | 5),], within = c("condition","repetition", "position"))
p.pos.con
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 3 | 4 | 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position == 2 | 3 | 4 | 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 && d25$condition == 2 | 4 && d25$position == 2 | 3 | 4 | 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 || 4 && d25$condition == 2 || 4 && d25$position == 2 || 3 || 4 || 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 || 4 && d25$condition == 2 | 4 && d25$position == 2 || 3 || 4 || 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 && d25$condition == 2 | 4 && d25$position == 2 || 3 || 4 || 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 && d25$condition == 2 | 4 && d25$position == 2 | 3 | 4 | 5),], within = c("condition","repetition", "position"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 && d25$condition == 2 | 4 && d25$position ==  4 && 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 && d25$condition == 2 | 4 && d25$position ==  4 && 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 && d25$position ==  4 && 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 && 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 & 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 && 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 & 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 | 5),], within = c("condition","repetition"))
aov_ez("subject", "rt", d25[which(d25$repetition == 1 | 4 & d25$condition == 2 | 4 & d25$position ==  4 | 5),], within = c("condition","repetition", "position"))
sqrt((4/29)/(9*29))
library(MASS)
library(MBESS)
m1 <- matrix(c(
1,   .5,   .5,
.5,    1,  .25,
.5,  .25,    1), nrow = 3, ncol = 3,
byrow = TRUE)
m2 <- cor2cov(m1, c(2, 1.8, 2.3))
set.seed(123)
d <- as.data.frame(mvrnorm(200, c(0,0,0),
m2, empirical = TRUE))
colnames(d) <- c('y','x1','x2')
m1 <- matrix(c(
1,   .5,   .5,
.5,    1,  .25,
.5,  .25,    1), nrow = 3, ncol = 3,
byrow = TRUE)
m2 <- cor2cov(m1, c(2, 1.8, 2.3))
set.seed(123)
d <- as.data.frame(mvrnorm(200, c(0,0,0),
m2, empirical = TRUE))
colnames(d) <- c('y','x1','x2')
#---------------------------
#Do we have what we asked for?
cor(d)
round(sapply(d, mean), 4)
cor(d)^2
mod1 = lm(y ~ x1, data = d)
summary(mod1)$r.squared
mod2 = lm(y ~ x2, data = d)
summary(mod2)$r.squared
max(c(summary(lm(y ~ x1, data = d))$r.square,
summary(lm(y ~ x2, data = d))$r.square
))
sum(c(summary(lm(y ~ x1, data = d))$r.square,
summary(lm(y ~ x2, data = d))$r.square
))
b1 = (cor(d$y,d$x1) - (cor(d$y,d$x2)*cor(d$x1,d$x2)))/
(1 - cor(d$x1,d$x2)^2)
b2 = (cor(d$y,d$x2) - (cor(d$y,d$x1)*cor(d$x1,d$x2)))/
(1 - cor(d$x1,d$x2)^2)
cor.matrix = matrix(c(1, .15, .25,
.15,  1,  .9,
.25, .9,   1), nrow = 3, ncol = 3, byrow = 				         TRUE)
set.seed(122291)
data = as.data.frame(mvrnorm(200, c(0,0,0),
cor.matrix, empirical = TRUE))
View(cor.matrix)
colnames(data) = c("Y", "X1", "X2") #renaming the columns...
cor(data$X1, data$X2)
mod3 = lm(Y ~ X1 + X2, data = data)
summary(mod3)
cor.matrix = matrix(c(1, .15, .25,
.15,  1,  .2,
.25, .2,   1), nrow = 3, ncol = 3, byrow = 				         TRUE)
set.seed(122291)
data2 = as.data.frame(mvrnorm(200, c(0,0,0),
cor.matrix, empirical = TRUE))
colnames(data2) = c("Y", "X1", "X2") #renaming the columns...
cor(data2$X1, data2$X2)
mod4 = lm(Y ~ X1 + X2, data = data2)
summary(mod4
)
mod3$coef;mod4$coef #What are some significant differences between the coefficients?
example = read.csv("TworekCimpian_2016.csv")
getwd()
setwd("walter/regression_204b/")
example = read.csv("TworekCimpian_2016.csv")
example = read.csv("/TworekCimpian_2016.csv")
example = read.csv("TworekCimpian_2016.csv")
getwd()
example = read.csv("Tworek&Cimpian_2016.csv")
View(example)
mod5 = lm(Should_Score ~ Inherence_Bias + Ought_Score, data = example)
summary(mod5)
interaction = lm(Should_Score ~ Inherence_Bias * Ought_Score, data = example)
summary(interaction)
AIC(mod5);AIC(interaction)
anova(mod5,interaction)
full.model = lm(Should_Score ~ excluded + RavensProgressiveMatrix_sum + Inherence_Bias + Good_Score + Ought_Score + Belief_in_Just_World, data = example)
backwards.model = step(full.model, direction = c("backward"))
forwards.model = step(intercept.model, direction = c("forward"), scope = ~excluded + RavensProgressiveMatrix_sum + Inherence_Bias + Good_Score + Ought_Score + Belief_in_Just_World)
intercept.model = lm(Should_Score ~ 1, data = example)
#start with intercept only model
forwards.model = step(intercept.model, direction = c("forward"), scope = ~excluded + RavensProgressiveMatrix_sum + Inherence_Bias + Good_Score + Ought_Score + Belief_in_Just_World)
